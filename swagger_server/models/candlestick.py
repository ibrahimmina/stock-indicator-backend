# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Candlestick(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: List[str]=None, close: List[float]=None, open: List[float]=None, high: List[float]=None, low: List[float]=None, volume: List[float]=None, adj_close: List[float]=None):  # noqa: E501
        """Candlestick - a model defined in Swagger

        :param _date: The _date of this Candlestick.  # noqa: E501
        :type _date: List[str]
        :param close: The close of this Candlestick.  # noqa: E501
        :type close: List[float]
        :param open: The open of this Candlestick.  # noqa: E501
        :type open: List[float]
        :param high: The high of this Candlestick.  # noqa: E501
        :type high: List[float]
        :param low: The low of this Candlestick.  # noqa: E501
        :type low: List[float]
        :param volume: The volume of this Candlestick.  # noqa: E501
        :type volume: List[float]
        :param adj_close: The adj_close of this Candlestick.  # noqa: E501
        :type adj_close: List[float]
        """
        self.swagger_types = {
            '_date': List[str],
            'close': List[float],
            'open': List[float],
            'high': List[float],
            'low': List[float],
            'volume': List[float],
            'adj_close': List[float]
        }

        self.attribute_map = {
            '_date': 'Date',
            'close': 'Close',
            'open': 'Open',
            'high': 'High',
            'low': 'Low',
            'volume': 'Volume',
            'adj_close': 'AdjClose'
        }
        self.__date = _date
        self._close = close
        self._open = open
        self._high = high
        self._low = low
        self._volume = volume
        self._adj_close = adj_close

    @classmethod
    def from_dict(cls, dikt) -> 'Candlestick':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The candlestick of this Candlestick.  # noqa: E501
        :rtype: Candlestick
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> List[str]:
        """Gets the _date of this Candlestick.


        :return: The _date of this Candlestick.
        :rtype: List[str]
        """
        return self.__date

    @_date.setter
    def _date(self, _date: List[str]):
        """Sets the _date of this Candlestick.


        :param _date: The _date of this Candlestick.
        :type _date: List[str]
        """

        self.__date = _date

    @property
    def close(self) -> List[float]:
        """Gets the close of this Candlestick.


        :return: The close of this Candlestick.
        :rtype: List[float]
        """
        return self._close

    @close.setter
    def close(self, close: List[float]):
        """Sets the close of this Candlestick.


        :param close: The close of this Candlestick.
        :type close: List[float]
        """

        self._close = close

    @property
    def open(self) -> List[float]:
        """Gets the open of this Candlestick.


        :return: The open of this Candlestick.
        :rtype: List[float]
        """
        return self._open

    @open.setter
    def open(self, open: List[float]):
        """Sets the open of this Candlestick.


        :param open: The open of this Candlestick.
        :type open: List[float]
        """

        self._open = open

    @property
    def high(self) -> List[float]:
        """Gets the high of this Candlestick.


        :return: The high of this Candlestick.
        :rtype: List[float]
        """
        return self._high

    @high.setter
    def high(self, high: List[float]):
        """Sets the high of this Candlestick.


        :param high: The high of this Candlestick.
        :type high: List[float]
        """

        self._high = high

    @property
    def low(self) -> List[float]:
        """Gets the low of this Candlestick.


        :return: The low of this Candlestick.
        :rtype: List[float]
        """
        return self._low

    @low.setter
    def low(self, low: List[float]):
        """Sets the low of this Candlestick.


        :param low: The low of this Candlestick.
        :type low: List[float]
        """

        self._low = low

    @property
    def volume(self) -> List[float]:
        """Gets the volume of this Candlestick.


        :return: The volume of this Candlestick.
        :rtype: List[float]
        """
        return self._volume

    @volume.setter
    def volume(self, volume: List[float]):
        """Sets the volume of this Candlestick.


        :param volume: The volume of this Candlestick.
        :type volume: List[float]
        """

        self._volume = volume

    @property
    def adj_close(self) -> List[float]:
        """Gets the adj_close of this Candlestick.


        :return: The adj_close of this Candlestick.
        :rtype: List[float]
        """
        return self._adj_close

    @adj_close.setter
    def adj_close(self, adj_close: List[float]):
        """Sets the adj_close of this Candlestick.


        :param adj_close: The adj_close of this Candlestick.
        :type adj_close: List[float]
        """

        self._adj_close = adj_close
