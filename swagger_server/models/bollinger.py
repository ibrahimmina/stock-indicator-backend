# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Bollinger(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: List[str]=None, bbl: List[float]=None, bbm: List[float]=None, bbu: List[float]=None, close: List[float]=None):  # noqa: E501
        """Bollinger - a model defined in Swagger

        :param _date: The _date of this Bollinger.  # noqa: E501
        :type _date: List[str]
        :param bbl: The bbl of this Bollinger.  # noqa: E501
        :type bbl: List[float]
        :param bbm: The bbm of this Bollinger.  # noqa: E501
        :type bbm: List[float]
        :param bbu: The bbu of this Bollinger.  # noqa: E501
        :type bbu: List[float]
        :param close: The close of this Bollinger.  # noqa: E501
        :type close: List[float]
        """
        self.swagger_types = {
            '_date': List[str],
            'bbl': List[float],
            'bbm': List[float],
            'bbu': List[float],
            'close': List[float]
        }

        self.attribute_map = {
            '_date': 'Date',
            'bbl': 'BBL',
            'bbm': 'BBM',
            'bbu': 'BBU',
            'close': 'Close'
        }
        self.__date = _date
        self._bbl = bbl
        self._bbm = bbm
        self._bbu = bbu
        self._close = close

    @classmethod
    def from_dict(cls, dikt) -> 'Bollinger':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bollinger of this Bollinger.  # noqa: E501
        :rtype: Bollinger
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> List[str]:
        """Gets the _date of this Bollinger.


        :return: The _date of this Bollinger.
        :rtype: List[str]
        """
        return self.__date

    @_date.setter
    def _date(self, _date: List[str]):
        """Sets the _date of this Bollinger.


        :param _date: The _date of this Bollinger.
        :type _date: List[str]
        """

        self.__date = _date

    @property
    def bbl(self) -> List[float]:
        """Gets the bbl of this Bollinger.


        :return: The bbl of this Bollinger.
        :rtype: List[float]
        """
        return self._bbl

    @bbl.setter
    def bbl(self, bbl: List[float]):
        """Sets the bbl of this Bollinger.


        :param bbl: The bbl of this Bollinger.
        :type bbl: List[float]
        """

        self._bbl = bbl

    @property
    def bbm(self) -> List[float]:
        """Gets the bbm of this Bollinger.


        :return: The bbm of this Bollinger.
        :rtype: List[float]
        """
        return self._bbm

    @bbm.setter
    def bbm(self, bbm: List[float]):
        """Sets the bbm of this Bollinger.


        :param bbm: The bbm of this Bollinger.
        :type bbm: List[float]
        """

        self._bbm = bbm

    @property
    def bbu(self) -> List[float]:
        """Gets the bbu of this Bollinger.


        :return: The bbu of this Bollinger.
        :rtype: List[float]
        """
        return self._bbu

    @bbu.setter
    def bbu(self, bbu: List[float]):
        """Sets the bbu of this Bollinger.


        :param bbu: The bbu of this Bollinger.
        :type bbu: List[float]
        """

        self._bbu = bbu

    @property
    def close(self) -> List[float]:
        """Gets the close of this Bollinger.


        :return: The close of this Bollinger.
        :rtype: List[float]
        """
        return self._close

    @close.setter
    def close(self, close: List[float]):
        """Sets the close of this Bollinger.


        :param close: The close of this Bollinger.
        :type close: List[float]
        """

        self._close = close
